{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fprq8\fcharset0 Liberation Serif;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;\red49\green49\blue49;\red0\green0\blue0;\red255\green0\blue0;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard {\b\f0\fs24\lang9{\field{\*\fldinst{HYPERLINK https://medium.com/digitalaholic/simple-nodejs-pagination-a2d787b77581 }}{\fldrslt{https://medium.com/digitalaholic/simple-nodejs-pagination-a2d787b77581\ul0\cf0}}}}\b\f0\fs24\line\line\line To start xamp\b0\line\fs22 sudo /opt/lampp/lampp start\par
sudo /opt/lampp/./manager-linux-x64.run\line\par
\b\fs28 check status\b0\fs24\line\cf2\fs21 sudo systemctl status mysql\par
\cf0\f1\fs22\par
\f0\fs24\line\b To Stop server\b0\line\fs22 sudo systemctl stop mysql\fs24\par

\pard\sa200\sl276\slmult1\f1\fs22\par
\b\fs24 Run mySql in Command promt\b0\fs22\par
cd "C:\\xampp\\mysql\\bin"\par
check mysql version\par
mysql --version\par
run mysql\par
mysql -u root -p -h localhost\par
\par
\par
\b\fs24 BETWEEN\b0\fs22\par
SELECT * FROM students where age \b BETWEEN \b0 20 AND 50;  (THIS && WILL NOT WORK ON IT)\par
\fs24\par
\b NOT BETWEEN\b0\par
\fs22 SELECT * FROM students where age NOT BETWEEN 20 AND 50;\par
\par
\b // \fs24 Create new Table\b0\fs22\par
\par
create table students(\par
     id int not null auto_increment primary key,\par
     fname varchar(100),\par
     dob date,\par
     dobtime time,\par
     dat datetime,\par
     event_datetime DATETIME\par
  );\par
\fs24\par
\b // Date Time\par
\b0\fs22 INSERT INTO my_table (event_name, event_datetime) VALUES\par
    ('Meeting', '2023-08-02 15:30:00'),\par
    ('Presentation', '2023-08-03 09:00:00');\par
\par
> select curdate();\par
> select curtime();\par
> select now();\tab\tab // date & time both\par
\par
// primary key foriegn key             \par
\par
CREATE TABLE students (\par
    cid INT AUTO_INCREMENT PRIMARY KEY,\par
    cname VARCHAR(50),\par
    cname VARCHAR(50),\par
 );\par
\par
CREATE TABLE orders(\par
    oid INT AUTO_INCREMENT PRIMARY KEY,\par
    orderdate date,\par
    oamount int,\par
    cid int, foreign key(cid) references customers(cid)\par
 );\par
\par
\par
// INNER JOIN\par
\par
select * from customers JOIN orders ON customers.cid = orders.cid;\par
\par
select customers.cid, cname, oamount from customers JOIN orders ON customers.cid = orders.cid;\par
\par
\par
//-------------------------Sequelize------------------------\par
\par
\tab -----------CRUD-----------\par
\par
// To Add data or Update\par
\par
// use this if you have data in array\par
let data = await User.bulkCreate([]);\par
\par
 let data = await User.create(\{\par
    firstName: "user",\par
    lastName: "user1@gmail.com",\par
  \});\par
\par
  //   data.set(\{firstName:"kumar"\});\tab // after .set(\{\}), it is impt. to call .save() method.\par
        await data.update(\{ firstName: "user1" \}); \par
  //   let dt = await data.save();\par
  //   let a = await data.destroy();\par
\par
  console.log("---data----", data.toJSON());\par
\par
\b\fs24 // To Update data\b0\fs22\par
  await ModelName.\b update\b0 (\par
            \{ name, email, gender \}, // The fields you want to update\par
            \{ where: \{ id \} \} // The condition to find the user\par
        );\par
\par
// To Find all data\par
 User.findAll(\{\});\par
\par
\par
// To Find Single data\par
 await User.findOne(\{\par
      where: \{ id: req.params.id \},\par
    \});\par
\par
  const saveDt= await User.findAll(\{\par
        attributes:['id', ['firstName','name']] \par
        // it will show firstName's values as name field\par
    \});\par
Output: \{id:"1",name:"amit"\}\par
\par
\par
// exclude \{projection in mongodb\}\par
\par
const saveDt= await User.findAll(\{\par
      attributes:\{exclude:['createdAt','updatedAt']\},\par
    \});\par
// It will delete excluded fields in response\par
\par
\par
// This is shorter, and less error prone because it still works if you add / remove attributes from your model later\par
\par
Model.findAll(\{\par
  attributes: [\par
    'id', 'foo', 'bar','hats',\tab\tab  // We had to list all attributes...\par
    [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats'] // To add the aggregation...\par
  ]\par
\});\par
\par
\par
Model.findAll(\{\par
  attributes: \{\par
    include: [\par
      [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats']\par
    ]\par
  \}\par
\});\par
// it will show all data with this extra key('n_hats')\par
\par
\par
\par
    const opdats= await User.findAll(\{\par
      where:\{\par
        id:\{\par
          [Op.gt]: 8\par
        \} \par
      \}\par
    \});\par
\par
\cf3\b\fs24 // --------------in db queries, both or keys will works-----------------\par
\cf0\b0\fs22   const opdats= await User.findAll(\{\par
    where: \{ [Op.or]: [ \{ id: 8 \}, \{ id: 7 \} ] \}\par
  \});\par
\par
   where: \{\par
    rank: \{\par
      [Op.or]: \{\par
        [Op.lt]: 1000,\par
        [Op.eq]: null\par
      \}\par
    \},\par
\par
where: \{ \par
   rank:\{\par
      [Op.or]: [\par
        \{title: \{ [Op.\cf4 like\cf0 ]: 'Boat%'\} \},\par
        \{description: \{[Op.\cf4 like\cf0 ]: '%boat%' \} \}\par
      ]\par
    \}\par
\}\par
\par
\par
\par
To destroy everything the TRUNCATE SQL can be used:\par
\par
// Truncate the table\par
await User.destroy(\{\par
  truncate: true\par
\});\par
\par
\par
\par
await User.\cf4 max\cf0 ('age'); // 40\par
await User.\cf4 max\cf0 ('age', \{ where: \{ age: \{ [\cf3 Op\cf4 .lt\cf0 ]: 20 \} \} \}); // 10\par
await User.min('age'); // 5\par
await User.min('age', \{ where: \{ age: \{ [Op.\cf4 gt\cf0 ]: 5 \} \} \}); // 10\par
await User.sum('age'); // 55\par
await User.sum('age', \{ where: \{ age: \{ [Op.\cf4 gt\cf0 ]: 5 \} \} \}); // 50\par
await User.count()\par
\par
\par
\par
\cf3\fs24 // Skip 5 instances and fetch the 5 after that\par
\cf0\fs22 // offset == skip\par
\par
Project.\cf4 findAll\cf0 (\{ \cf4 offset\cf0 : 5, \cf4 limit\cf0 : 5 \});\par
\par
await User.\cf4\b increment\cf0\b0 (\{age: 5\}, \{ where: \{ id: 1 \} \})\par
await User.\cf4\b increment\cf0\b0 (\{age: -5\}, \{ where: \{ id: 1 \} \})\par
\par
\par
\cf3\b\fs24\par
// It will find data, if data doesnt exists, then it will create.\par
\cf0\b0\fs22\par
let [user, created] = await User.findOrCreate(\{\par
     where: \{firstName: 'user3'\},\par
     defaults: \{\par
     lastName: 'javaScript'\par
   \}\par
\});\par
\par
\par
\cf4\b\fs24 // LIKE\cf0\b0\fs22\par
\cf4\b // IN\cf0\b0\par
await sequelize.query(\par
  'SELECT * FROM projects WHERE status IN(:status)',\par
  \{\par
    replacements: \{ status: ['active', 'inactive'] \},\par
    type: QueryTypes.SELECT\par
  \}\par
);\par
\par
\b\fs24\par
// RELATIONSHIP\par
// ONE TO ONE RELATIONSHIP\par
\b0\fs22\par
// db.user.hasOne(db.contact,\{foreignKey:"user_id",as:"contactDetails"\});\par
// db.user.hasMany(db.contact,\{foreignKey:"user_id",as:"contactDetails"\});\par
// db.contact.belongsTo(db.user,\{foreignKey:"user_id",as:"userDetails"\});\par
\par
\par
let oneToOne = async (req, res) => \{\par
  try \{\par
    // let data = await User.create(\{firstName: "rahul", lastName: "kumar"\});\par
    // if(data)\{\par
    //   await Contact.create(\{permanent_address:"abc",current_address:"xyz",user_id: data.id\})\par
    // \}\par
\par
    let getData= await User.findAll(\{ \par
      // attributes:['firstName','lastName'],\par
      include:[\{\par
        model:Contact,\par
        as:"contactDetails",\par
        attributes:\{exclude:['createdAt','updatedAt']\}\par
      \}],\par
      // where:\{id:4\}\par
    \})\par
    console.log("----getData-----", getData);\par
    res.status(200).json(getData);\par
  \} catch (e) \{\par
    console.log('------err----',e);\par
    throw e;\par
  \}\par
\};\par
\par
\par
\b\fs24 // One To One AND One To Many are same we have to change in index.js \b0\fs22\par
db.user.\cf4 belongsToMany\cf0 (db.contact,\{through:"user_contacts"\});\par
\par
\par
\b\fs24 // Many To Many\b0\fs22\par
\par
db.user.\cf4 belongsToMany\cf0 (db.contact,\{through:"user_contacts"\});    //  it will automatically create userId key, if we want manually we have to pass this,foreignKey:"user_id"\par
db.contact.\cf4 belongsToMany\cf0 (db.user,\{through:"user_contacts"\});    //  ,foreignKey:"contact_id"\par
\par
\par
// important to read all lines in this\par
\par
let ManyToMany = async (req, res) => \{\par
  try \{\par
    let data = await User.create(\{\par
      firstName: "amit", lastName: "kumar"\par
    \});\par
    if (data) \{\par
      var contact = await Contact.create(\{ permanent_address: "chd", current_address: "moh" \})\par
    \}\par
    if (contact) \{\par
\tab var a = await data.addContact(contact)\par
    \}\par
    let getData = await User.findAll(\{\par
      // attributes:['firstName','lastName'],\par
      include: [\{\par
        model: Contact,\par
        // as: "contactDetails", // we have not mentioned it in belongsToMany() function so we cant take it\par
        // attributes: \{ exclude: ["createdAt", "updatedAt"] \},\par
      \}],\par
      // where:\{id:4\}\par
    \});\par
\par
    res.status(200).json(getData);\par
  \} catch (err) \{\par
    throw err;\par
  \}\par
\};\par
\par
\par
\par
// With include, we get all data in single search that is Eager loading\par
// it will get single - single data of user and contact, it is Lazy loading\par
\par
\par
// maybe it will only works with findOne not all\par
\par
let lazyloadingUser = async (req, res) => \{\par
  try \{\par
    let data= await User.create(\{firstName:"user2",lastName:"kumar2"\});\par
    if(data)\{\par
      let c= await Contact.create(\{permanent_address:"una2",current_address:"panchkula1","user_id":data.id\})\par
    \}\par
    let getData = await User.findOne(\{\par
      where:\{id:2\},\par
      // include:[\{model:Contact,as:"contactDetails"\}],\par
    \});\par
    let contact = await getData.getContactDetails();\par
\par
    res.status(200).json(\{userData:getData,contactData:contact\});\par
  \} catch (err) \{\par
    throw err;\par
  \}\par
\};\par
\par
\par
\par
\b\fs24 //  ----------------- Advanced Eager Loading ----------------\par
\b0\fs22\par
//  User --> Contact --> Education --> "any other"\par
\par
//  For this we have to do some changes in Our Models\par
\par
\cf3\b\fs24 // ----------- Nested Loading --------- \cf4\par
\cf0\b0\fs22\par
let eagerLoading = async (req, res) => \{\par
  try \{\par
    // let getData = await User.findAll(\{\par
    //   include:[\{\par
    //     model:Contact,\par
    //     as:"contactDetails",\par
    //     required:false,\par
    //     right:true\par
    //   \},\{\par
    //     model: Education,\par
    //     as:"educationDetails"\par
    //   \}],\par
    // \});\par
\par
\par
\b // it will not good to use, Create Query by your -->\par
\b0     // let getData = await User.findAll(\{\par
    //   include:\{all:true, nested: true\},\par
    // \});\par
    \par
   let getData = await User.findAll(\{\par
      include:\{\par
        model: Contact,\par
\tab as:"contactDetails",\par
        include:\{\par
          model: Education,\par
\tab   as:"educationDetails"\par
 \tab   where:\{ id: 1\},          \par
        \},\par
        where:\{ id: 2 \}\par
      \},\par
      where:\{ id: 3 \}\par
    \});\par
\par
    res.status(200).json(getData);\par
  \} catch (err) \{\par
    throw err;\par
  \}\par
\};\par
\par
// here is 2 types of includes\par
include:[\{\}, \{\}, \{\}];\par
include:\{a:1, include:\{b:2, include:\{\}\}\}\par
 \par
  \par
\b\fs24 // ------------Creating with Associations------------------\b0\fs22\par
\par
let creator = async (req, res) => \{\par
  try \{\par
     let data= await Contact.create(\{\par
       permanent_address:'hampi',\par
       current_address:"noida",\par
       userDetails:\{\par
         firstName:"ram",\par
         lastName:"sham"\par
       \}\par
     \},\{\par
        include:[\{ association: db.contactUser \}],\par
     \});\par
\par
    // console.log('-----data------',data);\par
\par
    //let getData = await User.findAll(\{\par
    // include:\{\par
    //   model:Contact,\par
    //   as:"contactDetails",\par
    //     include:\{\par
    //      model:Education,\par
    //      as:"educationDetails"\par
    //    \}\par
    //  \}\par
    //\})\par
\par
    res.status(200).json(getData);\par
  \} catch (err) \{  \par
    throw err;\par
  \}\par
\par
\par
\par
\b\fs24 -------------when we got error while syncing------------- \par
\b0\fs22\par
const forceSync = async () => \{\par
  await db.sequelize.query('SET FOREIGN_KEY_CHECKS = 0');\par
  await db.sequelize.sync(\{ force: true \});\par
  await db.sequelize.query('SET FOREIGN_KEY_CHECKS = 1'); // setting the flag back for security\par
\};\par
\par
kotak  bank\par
18602662666\par
\par
\b\fs24 --------------HOOKS---------------\par
\b0\fs22 hooks:\{\par
beforeValidate:(user,options)=>\{\par
\}\}\par
\par
\par
\par
}
 