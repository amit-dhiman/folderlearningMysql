https://www.ultimateakash.com/blog-details/IiwzPGAKYAo=/How-to-implement-Transactions-in-Sequelize-&-Node.Js-(Express)

sequelize.query('SET FOREIGN_KEY_CHECKS = 0', { raw: true }).then(() => {
sequelize.sync({ force: true }).then(() => {
  console.log('----re-sync-----');

  sequelize.query('SET FOREIGN_KEY_CHECKS = 1', { raw: true });
  })
}).catch((err) => {
  console.log('----re sync err---', err);
  throw err
})




const { DataTypes } = require('sequelize');
const sequelize = require('./connection');

const User = sequelize.define('User', {
    name: {
        type: DataTypes.STRING 
    },
    email: {
        type: DataTypes.STRING 
    }, 
    latitude: {
        type: DataTypes.FLOAT(10, 6) 
    },
    longitude: {
        type: DataTypes.FLOAT(10, 6) 
    },
    status: {
        type: DataTypes.TINYINT(2)
    }
}, {
    underscored: true
}); 

User.addScope('distance', (latitude, longitude, distance, unit = "km") => {
    const constant = unit == "km" ? 6371 : 3959;
    const haversine = `(
        ${constant} * acos(
            cos(radians(${latitude}))
            * cos(radians(latitude))
            * cos(radians(longitude) - radians(${longitude}))
            + sin(radians(${latitude})) * sin(radians(latitude))
        )
    )`;
    return {
        attributes: [ 
            [sequelize.literal(haversine), 'distance'],
        ],
        having: sequelize.literal(`distance <= ${distance}`),
	limit: 5
    }
}) 
 

module.exports = User;

//----------------------------

const findNearbyDrivers = async (req, res) => {
  try {
    const latitude = 30.718522;
    const longitude = 76.717959;
    const distance = 6;
    

    const haversine = literal(`(
      6371 * acos(cos(radians(${latitude}))* cos(radians(latitude))* cos(radians(longitude) - radians(${longitude}))+ sin(radians(${latitude})) * sin(radians(latitude)))
    )`);
    
    const findDrivers = await db.drivers.findAll({
      attributes: [
        'id',[haversine, 'distance'],
      ],
      where: db.sequelize.where(haversine, '<=', distance),
      // order: [['distance', 'ASC']],
    });
        
    // const findDrivers= await libs.getAllData(db.drivers,{})
    res.status(200).json({code:200,message: "your ride has been canceled",data:findDrivers});
  } catch (err) {
    res.status(500).json({code:500,message: err.message});
  }
};





// ---------- lat long---------

sector 69 mohali  
lat:  30.713209
long: 76.706974

sector 70 mohali  
lat:  46.2336
long: 51.9912

sector 71 mohali  
lat:  30.704796
long: 76.710582

Sector 73 mohali  
lat:  30.717784
long: 76.701998

Sector 58 mohali  
lat:  30.723982
long: 76.711949
-------

Sector 59 mohali  
lat:  30.718522
long: 76.717959

Sector 60 mohali  
lat:  30.723982
long: 76.711949

Sector 62 mohali  
lat:  30.700221
long: 76.732719

Sector 63 mohali  
lat:  30.693873
long: 76.73789


Sector 08 mohali  
lat:  30.742573
long: 76.800872

Sector 09 mohali  
lat:  30.74936
long: 76.795211

























